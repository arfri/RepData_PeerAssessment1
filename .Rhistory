download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile="hid.csv")
hidData <- read.table(hidFile)
hidFile <- "hid.csv"
hidData <- read.table(hidFile)
dateDownloaded <- date()
hidData <- read.csv(hidFile)
hidData$val=24
[hidData$val=24]
hidData[1]
hidData[1,]
hidData$val
hidData <- read.csv(hidFile)
hidData$val
hidData$val
hidData[1,]
hidData[1, val]
hidData[1, VAL]
hidData[1, "val"]
hidData[1:3, "val"]
hidData[1:3, 5]
hidData[1:3, 1]
head(hidData)
table(hidData)
hidData[1:3, "VAL"]
hidData[,"VAL"]>24
hidData[,"VAL"]=24
hidData <- read.csv(hidFile)
hidData[,"VAL"]==24
sum(hidData[,"VAL"]==24)
sum(hidData[,"VAL"]==24, na.rm=TRUE)
hidData[,"FES"]
table(hidData[,"FES"])
gasFile <- "gas.xlsx"
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", destfile=gasFile)
library(xlsx)
install.package("xlsx")
install.packages(c("xlsx")
)
library(xlsx)
library(rJava)
library(xlsx)
download.file("https://s3.amazonaws.com/iflaounas/datasets/jira_clean.tsv.zip", destfile="e:\rcourse\jira_clean.tsv.zip")
download.file("https://s3.amazonaws.com/iflaounas/datasets/jira_clean.tsv.zip", destfile="e:/rcourse/jira_clean.tsv.zip")
download.file("http://s3.amazonaws.com/iflaounas/datasets/jira_clean.tsv.zip", destfile="e:/rcourse/jira_clean.tsv.zip")
library(swirl)
install_from_swirl("R Programming")
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
bye()
swirl()
library(swirl)
swirl()
getwd()
ls()
x<-9
ls()
list.files()
?list.files
args(list.files())
args(list.files)
old.dir<-getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", ",mytest3.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path('folder1', )
file.path('folder1', 'folder2')
?dir.create
dir.create("testdir2/testdir3", recursive=TRUE)
dir.create(file.path('testdir2','testdir3'), recursive=TRUE)
unlink("testdir2", recursive=TRUE)
setwd(old.dir)
unlink("testdir", recursive=TRUE)
library(swirl)
swirl()
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
install.packages("manipulate")
setwd("e:/rcourse/repdata/PeerAssessment1")
data <- read.csv(unz("activity.zip", "activity.csv"))
str(data)
head(data)
unique(data$interval)
unique(data$date)
as.date(data$date)
as.Date(data$date)
data$date <- as.Date(data$date)
str(data)
unique(data$date)
unique(date$interval)
unique(data$interval)
unique(data$date,data$interval)
library(plyr2)
library(dplyr)
install.packages("dplyr")
library(dplyr)
byDate <- group_by(data, date)
str(byDate)
summarize(byDate, totalSteps=sum(steps, na.rm=T))
summarize(byDate, totalSteps=sum(steps, na.rm=T), meanSteps=mean(steps, na.rm=T), medianSteps=median(steps, ma.rm=T))
summarize(byDate, totalSteps=sum(steps, na.rm=T), meanSteps=mean(steps, na.rm=T), medianSteps=median(steps, na.rm=T))
?sum
?median
summarize(byDate, totalSteps=sum(steps, na.rm=TRUE), meanSteps=mean(steps, na.rm=TRUE), medianSteps=median(steps, na.rm=TRUE))
summarize(byDate, median(steps, na.rm=TRUE))
summarize(byDate, median(steps))
median(data$steps)
median(data$steps, rm.na=TRUE)
median(data$steps, na.rm=TRUE)
median(data[date==as.Date("2012-10-01"), "steps"], na.rm=TRUE)
median(data[data$date==as.Date("2012-10-01"), "steps"], na.rm=TRUE)
data[data$date==as.Date("2012-10-01"), "steps"]
data$date
data[data$date==as.Date("2012-10-01"), "steps"]
summarize(byDate, totalSteps=sum(steps, na.rm=TRUE), meanSteps=mean(steps, na.rm=TRUE), medianSteps=median(steps, na.rm=TRUE))
summarize(byDate, totalSteps=sum(steps, na.rm=TRUE))
totalSteps$totalSteps
totalSteps <- summarize(byDate, totalSteps=sum(steps, na.rm=TRUE))
str(totalSteps)
mean(totalSteps$totalSteps)
totalSteps <- summarize(byDate, totalSteps=sum(steps, na.rm=TRUE))$totalSteps
hist(totalSteps)
mean(totalSteps)
median(totalSteps)
print("Mean total steps: ",mean(totalSteps))
cat("Mean total steps: ",mean(totalSteps))
names(data)
byInterval <- group_by(data, interval)
meanSteps <- summarize(byInterval, meanSteps=mean(steps, na.rm=TRUE))
meanSteps
plot(meanSteps)
plot(meanSteps, type="l")
?plot
plot(meanSteps, type="l", xlab="5-minute interval", ylab="average number of steps")
max(meanSteps)
which(max(meanSteps))
?max
which.max(meanSteps)
?which.max
str(meanSteps)
which.max(meanSteps$meanSteps)
meanSteps[which.max(meanSteps$meanSteps), "interval"]
meanSteps[which.max(meanSteps$meanSteps)]$interval
meanSteps[which.max(meanSteps$meanSteps)]
meanSteps[which.max(meanSteps$meanSteps),]
meanSteps[which.max(meanSteps$meanSteps),]$interval
?complete.cases
sum(!complete.cases(data))
sum(is.na(data$steps))
?impute
?ddply
?mutate
?replace
?impute
?mutate_each
?funs
mutate(byDate, steps = ifelse(is.na(steps), mean(steps, na.rm = T), steps))
ifelse(is.na(steps), mean(steps, na.rm = T), steps)
with(byDate, ifelse(is.na(steps), mean(steps, na.rm = T), steps))
byDate %>% mutate(steps = ifelse(is.na(steps), mean(steps, na.rm = T), steps))
with(byDate, mutate(steps = ifelse(is.na(steps), mean(steps, na.rm = T), steps)))
byDate %>% mutate(steps = ifelse(is.na(steps), mean(steps, na.rm = T), steps))
byDate %>% mutate(steps = with(byDate,ifelse(is.na(steps), mean(steps, na.rm = T), steps)))
byDate %>% mutate(steps = ifelse(is.na(byDate$steps), mean(byDate$steps, na.rm = T), byDate$steps))
with(byDate, ifelse(is.na(steps), mean(steps, na.rm = T), steps))
data %.% group_by(date) %.% mutate(steps = ifelse(is.na(steps), mean(steps, na.rm = T), steps))
data %>% group_by(date) %>% mutate(steps = ifelse(is.na(steps), mean(steps, na.rm = T), steps))
data %>% group_by(date) %>% mutate(steps = ifelse(is.na(steps), as.integer(mean(steps, na.rm = T)), steps))
head(data)
mean(byDate$steps, na.rm = T)
?ifelse
data %>% group_by(date) %>% mutate(steps = ifelse(is.na(steps), as.integer(mean(steps, na.rm = T)), steps), by=date)
data
head(data)
stepsByDate <- summarize(byDate, total=sum(steps, na.rm=TRUE))
hist(stepsByDate$total)
cat("Mean total steps: ",mean(stepsByDate$total))
cat("Median total steps: ", median(stepsByDate$total))
hist(stepsByDate$total, main="Histogram of total number of steps taken each day", xlab="Number of steps")
cat("Mean total steps: ",mean(stepsByDate$total))
cat("Median total steps: ", median(stepsByDate$total))
head(stepsByDate)
stepsByDate[1,"date"]
stepsByDate[1]$date
stepsByDate[1,]$date
data <- read.csv(unz("activity.zip", "activity.csv"))
data$date <- as.Date(data$date)
data[data$date==stepsByDate[i,"date"] && is.na(data$steps), "steps"]
data[data$date==stepsByDate[1,"date"] && is.na(data$steps), "steps"]
data[data$date==stepsByDate[1,"date"] && is.na(data$steps),]
stepsByDate[1,"date"]
data[data$date==stepsByDate[i,"date"] & is.na(data$steps), "steps"]
data[data$date==stepsByDate[1,"date"] & is.na(data$steps), "steps"]
stepsByInterval <- summarize(byInterval, mean=mean(steps, na.rm=TRUE))
cat("interval with the highest mean number of steps: ", stepsByInterval[which.max(stepsByInterval$mean),"interval"])
cat("interval with the highest mean number of steps: ", stepsByInterval[which.max(stepsByInterval$mean),]$interval])
byInterval <- group_by(data, interval)
stepsByInterval <- summarize(byInterval, mean=mean(steps, na.rm=TRUE))
plot(stepsByInterval, type="l", xlab="5-minute interval", ylab="average number of steps")
cat("interval with the highest mean number of steps: ", stepsByInterval[which.max(stepsByInterval$mean),]$interval])
which.max(stepsByInterval$mean)
stepsByInterval[which.max(stepsByInterval$mean),]
cat("interval with the highest mean number of steps: ", stepsByInterval[which.max(stepsByInterval$mean),]$interval)
cat("interval with the highest mean number of steps: ", stepsByInterval[which.max(stepsByInterval$mean),"interval"])
cat("Number of rows with missing values: ", sum(!complete.cases(data)))
for (i in seq_along(stepsByInterval)) {
data[data$interval==stepsByInterval[i,"interval"] & is.na(data$steps), "steps"] = stepsByInterval[i,]$mean
}
data[data$interval==stepsByInterval[i,"interval"] & is.na(data$steps), "steps"]
data[data$interval==stepsByInterval[1,"interval"] & is.na(data$steps), "steps"]
data$interval==stepsByInterval[1,"interval"]
stepsByInterval[1,"interval"]
data$interval
data$interval==0
data[data$interval==stepsByInterval[i,"interval"] & is.na(data$steps), "steps"]
length(data$interval==stepsByInterval[i,"interval"])
stepsByInterval[i,"interval"]
data$interval==0
data$interval==stepsByInterval[i,"interval"]
data$interval
data$interval == stepsByInterval[i,"interval"]
stepsByInterval[i,"interval"]
data[data$interval==stepsByInterval[i,]$interval & is.na(data$steps), "steps"]
data[data$interval==stepsByInterval[1,]$interval & is.na(data$steps), "steps"]
data[data$interval==stepsByInterval[2,]$interval & is.na(data$steps), "steps"]
data[data$interval==stepsByInterval[3,]$interval & is.na(data$steps), "steps"]
data[data$interval==stepsByInterval[5,]$interval & is.na(data$steps), "steps"]
data[data$interval==stepsByInterval[50,]$interval & is.na(data$steps), "steps"]
data[data$interval==stepsByInterval[500,]$interval & is.na(data$steps), "steps"]
for (i in seq_along(stepsByInterval)) {
data[data$interval==stepsByInterval[i,]$interval & is.na(data$steps), "steps"] = stepsByInterval[i,]$mean
}
head(data)
stepsByInterval[i,]$mean
stepsByInterval[1,]$mean
stepsByInterval[2,]$mean
stepsByInterval
seq_along(stepsByInterval)
length(stepsByInterval)
dim(stepsByInterval)
seq_along(stepsByInterval,1)
?seq_along
for (i in seq_along(nrow(stepsByInterval))) {
data[data$interval==stepsByInterval[i,]$interval & is.na(data$steps), "steps"] = stepsByInterval[i,]$mean
}
head(data)
seq_along(nrow(stepsByInterval))
nrow(stepsByInterval)
seq_len(nrow(stepsByInterval))
for (i in seq_len(nrow(stepsByInterval))) {
data[data$interval==stepsByInterval[i,]$interval & is.na(data$steps), "steps"] = stepsByInterval[i,]$mean
}
head(data)
data <- read.csv(unz("activity.zip", "activity.csv"))
data$date <- as.Date(data$date)
imputedData <- data
for (i in seq_len(nrow(stepsByInterval))) {
imputedData[imputedData$interval==stepsByInterval[i,]$interval & is.na(imputedData$steps), "steps"] = stepsByInterval[i,]$mean
}
head(data)
head(imputedData)
byDate <- group_by(imputedData, date)
stepsByDate <- summarize(byDate, total=sum(steps))
hist(stepsByDate$total, main="Histogram of total number of steps taken each day", xlab="Number of steps")
cat("Mean total steps: ",mean(stepsByDate$total))
cat("Median total steps: ", median(stepsByDate$total))
hist(stepsByDate$total, main="Histogram of total number of steps taken each day (imputed)", xlab="Number of steps")
?mutate
unique(weekdays(imputedData$date))
mutate(imputedData, dayType=factor("weekend") if weekdays(imputedData$date) %in% ("Saturday","Sunday") else factor("weekend"))
?mutate
?ifelse
mutate(imputedData, dayType=ifelse(weekdays(imputedData$date) %in% ("Saturday","Sunday"), factor("weekend"),factor("weekend"))
mutate(imputedData, dayType=ifelse(weekdays(imputedData$date) %in% c("Saturday","Sunday"), factor("weekend"),factor("weekend"))
)
head(imputedData)
imputedData <- mutate(imputedData, dayType=ifelse(weekdays(imputedData$date) %in% c("Saturday","Sunday"), factor("weekend"),factor("weekend")))
head(imputedData)
imputedData <- mutate(imputedData, dayType=ifelse(weekdays(imputedData$date) %in% c("Saturday","Sunday"), as.factor("weekend"),as.factor("weekend")))
head(imputedData)
imputedData <- mutate(imputedData, dayType=ifelse(weekdays(imputedData$date) %in% c("Saturday","Sunday"), as.factor("weekend"),as.factor("weekday")))
head(imputedData)
imputedData <- mutate(imputedData, dayType=ifelse(weekdays(imputedData$date) %in% c("Saturday","Sunday"), as.factor("weekend", levels=c("weekend","weekday")),as.factor("weekday",levels=c("weekend","weekday"))))
imputedData <- mutate(imputedData, dayType=ifelse(weekdays(imputedData$date) %in% c("Saturday","Sunday"), factor("weekend", levels=c("weekend","weekday")),factor("weekday",levels=c("weekend","weekday"))))
head(imputedData)
class(imputedData$dayType)
imputedData <- mutate(imputedData, dayType=ifelse(weekdays(imputedData$date) %in% c("Saturday","Sunday"), "weekend","weekday"))
head(imputedData)
class(imputedData$dayType)
imputedData <- mutate(imputedData, dayType=as.factor(ifelse(weekdays(imputedData$date) %in% c("Saturday","Sunday"), "weekend","weekday")))
class(imputedData$dayType)
head(imputedData)
str(imputedData$dayType)
weekendByInterval <- group_by(imputedData[dayType=="weekend",], interval)
imputedData[dayType=="weekend",]
head(imputedData)
weekendByInterval <- group_by(imputedData[imputedData$dayType=="weekend",], interval)
weekendStepsByInterval <- summarize(weekendByInterval, mean=mean(steps))
weekdayByInterval <- group_by(imputedData[imputedData$dayType=="weekday",], interval)
weekdayStepsByInterval <- summarize(weekdayByInterval, mean=mean(steps))
plot(weekendStepsByInterval, type="l", xlab="5-minute interval", ylab="average number of steps", main="weekend")
plot(weekdayStepsByInterval, type="l", xlab="5-minute interval", ylab="average number of steps", main="weekday")
library(lattice)
?group_by
groupedData <- groupBy(imputedData, interval, dayType)
groupedData <- group_by(imputedData, interval, dayType)
stepsByIntervalDaytype <- summarize(groupedData, mean=mean(steps))
stepsByIntervalDaytype
xyplot(steps~interval | dayType)
with(stepsByIntervalDayType, xyplot(steps~interval | dayType))
with(stepsByIntervalDaytype, xyplot(steps~interval | dayType))
with(stepsByIntervalDaytype, xyplot(mean~interval | dayType))
with(stepsByIntervalDaytype, xyplot(mean~interval | dayType), type="l")
with(stepsByIntervalDaytype, xyplot(mean~interval | dayType, type="l"))
par(mfrow=c(1,1))
with(stepsByIntervalDaytype, xyplot(mean~interval | dayType, type="l", layout=c(2,1)))
with(stepsByIntervalDaytype, xyplot(mean~interval | dayType, type="l", layout=c(2,1)))
with(stepsByIntervalDaytype, xyplot(mean~interval | dayType, type="l", layout=c(1,2)))
with(stepsByIntervalDaytype, xyplot(mean~interval | dayType, type="l", layout=c(1,2), ylab="number of steps"))
